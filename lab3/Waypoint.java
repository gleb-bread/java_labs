
/**
 * Этот класс представляет собой один шаг в пути, сгенерированном A* pathfinding
 * алгоритм. Путевые точки состоят из местоположения, предыдущей путевой точки в
 * пути и некоторых значений затрат, используемых для определения наилучшего
 * пути.
 **/
public class Waypoint {
    /** Местоположение этой путевой точки. **/
    Location loc;

    /**
     * Предыдущая путевая точка на этом пути или <код>null</code>, если это
     * корень поиска A*.
     **/
    Waypoint prevWaypoint;

    /**
     * В этом поле хранится общая предыдущая стоимость получения от начальной
     * местоположение до этой путевой точки, через цепочку путевых точек. Это
     * фактическая стоимость следования по пути; она не включает никаких оценок.
     **/
    private float prevCost;

    /**
     * В этом поле хранится оценка оставшейся стоимости поездки из
     * эта путевая точка к конечному пункту назначения.
     **/
    private float remainingCost;

    /**
     * Создайте новую путевую точку для указанного местоположения. Предыдущая
     * путевая точка
     * может быть дополнительно указано, или ссылка может быть <code>null</code>,
     * чтобы
     * указать, что путевая точка является началом пути.
     **/
    public Waypoint(Location loc, Waypoint prevWaypoint) {
        this.loc = loc;
        this.prevWaypoint = prevWaypoint;
    }

    /** Возвращает местоположение путевой точки. **/
    public Location getLocation() {
        return loc;
    }

    /**
     * Возвращает предыдущую путевую точку в пути или <код>null</code>, если это
     * - это начало пути.
     **/
    public Waypoint getPrevious() {
        return prevWaypoint;
    }

    /**
     * Этот мутатор позволяет устанавливать как предыдущую стоимость, так и
     * оставшуюся стоимость
     * в одном вызове метода. Обычно эти значения будут установлены на одном и том
     * же
     * время в любом случае.
     **/
    public void setCosts(float prevCost, float remainingCost) {
        this.prevCost = prevCost;
        this.remainingCost = remainingCost;
    }

    /**
     * Возвращает фактическую стоимость перехода к этой точке с начальной
     * местоположение, через ряд путевых точек в этой цепочке.
     **/
    public float getPreviousCost() {
        return prevCost;
    }

    /**
     * Возвращает оценку оставшейся стоимости поездки из этого
     * укажите на конечный пункт назначения.
     **/
    public float getRemainingCost() {
        return remainingCost;
    }

    /**
     * Возвращает общую смету затрат для этой путевой точки. Это включает в
     * себя * фактическую стоимость проезда до этой точки из исходного
     * местоположения, плюс
     * оценка оставшейся стоимости поездки из этой точки до
     * конечного пункта назначения.
     **/
    public float getTotalCost() {
        return prevCost + remainingCost;
    }
}
